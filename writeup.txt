Documentation and Writeup for Dynamic Memory Allocator
-------------------------------------------------------

Team memebers:
1) Aaditya Thakkar - 201401009
2) Aaska Shah – 201401029

In this project we have made a dynamic storage allocator for C programs by making our own versions of malloc, free and realloc. For this purpose, we have used the approach “Segregated explicit free list” that contains 10 different bucket sizes varying from 'less than 2^6' to 'greater than 2^14'  in the intervals of the powers of 2.

Why Segregated Free List?
-------------------------

Segregated free list uses different free lists for different size classes. We can merely see them as an array of explicit free list. We are using this approach because it performs adding and freeing operations in constant time. In addition to that, Segregated best fit approach is faster than the regular/unsegregated best fit since it always searches in a free list of an appropriate index (which contains range of sizes of blocks) and finds the best fit, if it fails to find, it checks in the next free list index. It also controls fragmentation of segregated storage by everytime splicing and coalescing the blocks after searching and allocating the block. It turns out to be faster than implicit and explicit free lists, but in some cases we also see trade-offs leading to bad fragmentation.  



First thing first, the block structure that we have used throughout the implementation is sketched below: 

----+---+----+-----+-----+-----+----+-----+-------+-------+------+----+
|         | Next       |   Prev      |                   |            |              
| Header  | Block      |    Block    |  ………………………………………….|  Footer    |
|         |Pointer     |    Pointer  |                   |            |
-----+-----+------+------+------+------+-----+-------+-------+-------+-

Hence the block pointer 'bp' everytime points to the location of the Next Block Pointer.


**The things which we have added or updated can be mainly differentiated into following tasks:
-----------------------------------------------------------------------------------------------

→ Defining additional macros for segregated list which are basically getter and setter methods for getting and setting next and previous block pointers. According to the block structure that we are using.

→  Defined additional functions to perform operations on free list, i.e. adding a free block to the free list, removing a newly allocated block from the free list, coalescing between the blocks, etc. In the coalescing routine, we have taken the cases where the block being freed has both next and previous blocks free/allocated and accordingly by calling the block coalescing routine, we are adding the new coalesced block to the free list and removing the block from the free list, on which coalescing was being performed.  
           
          
→ Created a routine of 'segregated_best_fit' for segregated free list, for which we are using the best fit method to find a fit for a block of given/asked size. In the beginning of the routine we are getting the list index from where the appropriate size of block could be achieved and if it fails to find any free block in that particular linked list of the list index (I.e.  if free list is empty for that particular list index), it will search for the best fit in the linked list of next list index.	   

→ Updated the malloc and free routines that can call the segregated explicit list routines which we have made initially. Now it calls segregated_best_fit instead of find_fit and after allocating the blocks it calls an updated 'place' routine (which is now able to handle splicing of under-allocated blocks and placing the smaller splice into an appropriate free list). Also it calls 'extend_heap' routine if it fails to allocate a block of asked size. In the 'free' routine there is no change from what was given earlier apart from calling a new 	   'coalescing_for_segregate' routine instead of regular coalesce routine. Updating malloc and free turned out to be a boost in the performance up to 38%.   
         
→ Finally we updated the realloc routine boosting up the performance up to 95%. We have added a few new things there making the stuff unchanged that were already there earlier. If the realloc'd block has previously been given more size than it needs, perhaps this realloc request can be serviced within the same block. Also If old ptr is NULL, then it just calls malloc, as it was doing previously. And if If size is zero then it just calls  free, and returns NULL.

→ Made an updated version of heap consistency checker which can now check for the following:
           1. Checks Prologue header
           2. Checks if the block is double word aligned or not.
           3. Checks if header matches footer or not.
	   4. Checks if contiguous free blocks somehow escaped coalescing.
	   5. Checks if free block is actually in free list. The number of free blocks in heap and segregated list match.
	   6. Checks if pointers in free list points to valid free blocks.
	   7. Checks epilogue header.
         
→ Documentation and writeup.txt. 








 




